# Generated by Django 4.2.23 on 2025-10-30 11:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("terra_layer", "0022_alter_reportfield_options"),
    ]

    operations = [
        migrations.AddField(
            model_name="report",
            name="config_label",
            field=models.CharField(
                default="", max_length=255, verbose_name="Report configuration"
            ),
            preserve_default=False,
        ),
        migrations.RunSQL(
            "DROP VIEW IF EXISTS report_view;", reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            sql="""
                CREATE VIEW report_view AS
                SELECT r.id,
                       r.created_at,
                       r.status,
                       r.content,
                       r.geom,
                       COALESCE(u.email, 'Deleted user')                   as user_email,
                       l.name                                              as layer_name,
                       l.id                                                as layer_id,
                       rc.id                                               as config_id,
                       r.config_label                                      as config_label,
                       f.id                                                as feature_id,
                       f.properties                                        as feature_properties,
                       lmf.name                                            as feature_main_field_name,
                       -- Extract main field value from feature properties
                       CASE
                           WHEN lmf.name IS NOT NULL AND f.properties IS NOT NULL
                               THEN f.properties ->>lmf.name
                           ELSE CAST(f.id AS TEXT)
                           END                                             as feature_main_field_value,
                       -- Extract value using id_field from Source
                       s.id_field                                          as feature_unique_field_name,
                       CASE
                           WHEN s.id_field IS NOT NULL AND f.properties IS NOT NULL
                               THEN f.properties ->>s.id_field
                           ELSE NULL
                           END                                             as feature_unique_field_value,
                       -- Count of related files
                       COUNT(DISTINCT rf.id)                               as files_count,
                       STRING_AGG(DISTINCT rf.file, ', ' ORDER BY rf.file) as file_names,
                       -- Count of status changes
                       COUNT(DISTINCT sc.id)                               as status_changes_count,
                       -- All status changes with dates, messages, and before->after info
                       CASE
                           WHEN COUNT(sc.id) = 0 THEN NULL
                           ELSE STRING_AGG(
                                   CONCAT(
                                           sc.updated_at::TEXT,
                                           ' | ',
                                           COALESCE(sc.status_before, ''),
                                           ' -> ',
                                           COALESCE(sc.status_after, ''),
                                           ' | ',
                                           COALESCE(sc.message, '')
                                   ),
                                   ' || '
                                       ORDER BY sc.updated_at ASC
                                )
                           END                                             as status_changes_history
                FROM terra_layer_report r
                         LEFT JOIN accounts_user u ON r.user_id = u.id
                         LEFT JOIN terra_layer_reportconfig rc ON r.config_id = rc.id
                         LEFT JOIN terra_layer_layer l ON r.layer_id = l.id
                         LEFT JOIN geosource_source s ON l.source_id = s.id
                         LEFT JOIN geostore_feature f ON r.feature_id = f.id
                         LEFT JOIN geosource_field lmf ON l.main_field_id = lmf.id
                         LEFT JOIN terra_layer_reportfile rf ON rf.report_id = r.id
                         LEFT JOIN terra_layer_statuschange sc ON sc.report_id = r.id
                GROUP BY r.id, r.created_at, r.status, r.content,
                         u.email, u.id, l.name, l.id, rc.id, f.id,
                         f.properties, lmf.name, s.id_field;
                """,
            reverse_sql="DROP VIEW IF EXISTS report_view;",
        ),
        migrations.CreateModel(
            name="ManagersMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(verbose_name="Manager message")),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "declaration",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="declaration_managers_messages",
                        to="terra_layer.declaration",
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report_managers_messages",
                        to="terra_layer.report",
                    ),
                ),
            ],
            options={
                "verbose_name": "Managers message",
                "verbose_name_plural": "Managers messages",
                "ordering": ["updated_at"],
            },
        ),
        migrations.AddConstraint(
            model_name="managersmessage",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("declaration__isnull", False),
                    ("report__isnull", False),
                    _connector="XOR",
                ),
                name="manager_message_has_report_xor_declaration",
            ),
        ),
    ]
